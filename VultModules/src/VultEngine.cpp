
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "VultEngine.h"
#include "c74_msp.h"

float getSampleRate()
{
   return c74::max::sys_getsr();
}

float Util_sampleRateScale(){
   return (44100.f / getSampleRate());
}

void Util__ctx_type_2_init(Util__ctx_type_2 &_output_){
   Util__ctx_type_2 _ctx;
   _ctx.pre = 0;
   _output_ = _ctx;
   return ;
}

void Util_edge_init(Util__ctx_type_2 &_output_){
   Util__ctx_type_2_init(_output_);
   return ;
}

uint8_t Util_edge(Util__ctx_type_2 &_ctx, uint8_t x){
   uint8_t ret;
   ret = (x && bool_not(_ctx.pre));
   _ctx.pre = x;
   return ret;
}

void Util__ctx_type_3_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3 _ctx;
   _ctx.pre_x = 0.f;
   _output_ = _ctx;
   return ;
}

void Util_change_init(Util__ctx_type_3 &_output_){
   Util__ctx_type_3_init(_output_);
   return ;
}

uint8_t Util_change(Util__ctx_type_3 &_ctx, float x){
   uint8_t v;
   v = (_ctx.pre_x != x);
   _ctx.pre_x = x;
   return v;
}

float Util_cubic_clipper(float x){
   uint8_t _cond_32;
   _cond_32 = (x <= -0.666666666667f);
   if(_cond_32){
      return -0.666666666667f;
   }
   else
   {
      uint8_t _cond_31;
      _cond_31 = (x >= 0.666666666667f);
      if(_cond_31){
         return 0.666666666667f;
      }
      else
      {
         return (1.17391304348f * (x + (-0.333333333333f * x * x * x)));
      }
   }
}

float Util_stanh(float x){
   int index;
   index = int_clip(float_to_int((5.f * (x + 24.f))),0,240);
   return (float_wrap_array(Util_stanh_c0)[index] + (x * (float_wrap_array(Util_stanh_c1)[index] + (float_wrap_array(Util_stanh_c2)[index] * x))));
}

float Util_sine(float x){
   int index;
   index = int_clip(float_to_int((100.f * x)),0,100);
   return (float_wrap_array(Util_sine_c0)[index] + (x * (float_wrap_array(Util_sine_c1)[index] + (float_wrap_array(Util_sine_c2)[index] * x))));
}

float Util_saturate(float x){
   int index;
   index = int_clip(float_to_int((5.f * (x + 24.f))),0,240);
   return (float_wrap_array(Util_saturate_c0)[index] + (x * (float_wrap_array(Util_saturate_c1)[index] + (float_wrap_array(Util_saturate_c2)[index] * x))));
}

float Util_map(float x, float x0, float x1, float y0, float y1){
   return ((((x + (- x0)) * (y1 + (- y0))) / (x1 + (- x0))) + y0);
}

void Util__ctx_type_9_init(Util__ctx_type_9 &_output_){
   Util__ctx_type_9 _ctx;
   _ctx.y1 = 0.f;
   _ctx.x1 = 0.f;
   _output_ = _ctx;
   return ;
}

void Util_dcblock_init(Util__ctx_type_9 &_output_){
   Util__ctx_type_9_init(_output_);
   return ;
}

float Util_dcblock(Util__ctx_type_9 &_ctx, float x0){
   float y0;
   y0 = (x0 + (- _ctx.x1) + (_ctx.y1 * 0.995f));
   _ctx.x1 = x0;
   _ctx.y1 = y0;
   return y0;
}

void Util__ctx_type_10_init(Util__ctx_type_10 &_output_){
   Util__ctx_type_10 _ctx;
   _ctx.x = 0.f;
   _output_ = _ctx;
   return ;
}

void Util_smooth_init(Util__ctx_type_10 &_output_){
   Util__ctx_type_10_init(_output_);
   return ;
}

float Util_smooth(Util__ctx_type_10 &_ctx, float input){
   _ctx.x = (_ctx.x + ((input + (- _ctx.x)) * 0.005f));
   return _ctx.x;
}

float Util_cvToPitch(float cv){
   return ((cv * 120.f) + 24.f);
}

float Util_cvToperiodUnit(float cv){
   int index;
   index = int_clip(float_to_int((31.f * cv)),0,31);
   return (float_wrap_array(Util_cvToperiodUnit_c0)[index] + (cv * (float_wrap_array(Util_cvToperiodUnit_c1)[index] + (float_wrap_array(Util_cvToperiodUnit_c2)[index] * cv))));
}

float Util_cvTokHz(float cv){
   int index;
   index = int_clip(float_to_int((31.f * cv)),0,31);
   return (float_wrap_array(Util_cvTokHz_c0)[index] + (cv * (float_wrap_array(Util_cvTokHz_c1)[index] + (float_wrap_array(Util_cvTokHz_c2)[index] * cv))));
}

float Util_pitchToRateUnit(float pitch){
   int index;
   index = int_clip(float_to_int((0.244094488189f * pitch)),0,31);
   return (float_wrap_array(Util_pitchToRateUnit_c0)[index] + (pitch * (float_wrap_array(Util_pitchToRateUnit_c1)[index] + (float_wrap_array(Util_pitchToRateUnit_c2)[index] * pitch))));
}

float Util_cvToRateUnit(float cv){
   int index;
   index = int_clip(float_to_int((141.111111111f * cv)),0,127);
   return (float_wrap_array(Util_cvToRateUnit_c0)[index] + (cv * (float_wrap_array(Util_cvToRateUnit_c1)[index] + (float_wrap_array(Util_cvToRateUnit_c2)[index] * cv))));
}

void Util__ctx_type_16_init(Util__ctx_type_16 &_output_){
   Util__ctx_type_16 _ctx;
   _ctx.rate = 0.f;
   Util__ctx_type_3_init(_ctx._inst21);
   Util__ctx_type_3_init(_ctx._inst20);
   _output_ = _ctx;
   return ;
}

void Util_pitchToRate_init(Util__ctx_type_16 &_output_){
   Util__ctx_type_16_init(_output_);
   return ;
}

float Util_pitchToRate(Util__ctx_type_16 &_ctx, float pitch){
   float fs;
   fs = getSampleRate();
   uint8_t _cond_34;
   _cond_34 = (Util_change(_ctx._inst20,pitch) || Util_change(_ctx._inst21,fs));
   if(_cond_34){
      _ctx.rate = (Util_pitchToRateUnit(pitch) / getSampleRate());
   }
   return _ctx.rate;
}

void Util__ctx_type_17_init(Util__ctx_type_17 &_output_){
   Util__ctx_type_17 _ctx;
   _ctx.rate = 0.f;
   Util__ctx_type_3_init(_ctx._inst25);
   Util__ctx_type_3_init(_ctx._inst24);
   _output_ = _ctx;
   return ;
}

void Util_cvToRate_init(Util__ctx_type_17 &_output_){
   Util__ctx_type_17_init(_output_);
   return ;
}

float Util_cvToRate(Util__ctx_type_17 &_ctx, float cv){
   float fs;
   fs = getSampleRate();
   uint8_t _cond_35;
   _cond_35 = (Util_change(_ctx._inst24,cv) || Util_change(_ctx._inst25,fs));
   if(_cond_35){
      _ctx.rate = (Util_cvToRateUnit(cv) / fs);
   }
   return _ctx.rate;
}

void Util__ctx_type_18_init(Util__ctx_type_18 &_output_){
   Util__ctx_type_18 _ctx;
   _ctx.x1 = 0;
   _output_ = _ctx;
   return ;
}

void Util_simple_noise_init(Util__ctx_type_18 &_output_){
   Util__ctx_type_18_init(_output_);
   return ;
}

float Util_simple_noise(Util__ctx_type_18 &_ctx){
   _ctx.x1 = (((_ctx.x1 * 17389) + 7919) % 32768);
   float y1;
   y1 = (int_to_float(_ctx.x1) * 3.0517578125e-05f);
   return y1;
}

float Util_polylog(float x){
   float xx;
   xx = float_clip(x,0.f,1.f);
   return ((2.f + (- xx)) * xx);
}

float Util_fadeA(float x){
   int index;
   index = int_clip(float_to_int((31.f * x)),0,31);
   return (float_wrap_array(Util_fadeA_c0)[index] + (x * (float_wrap_array(Util_fadeA_c1)[index] + (float_wrap_array(Util_fadeA_c2)[index] * x))));
}

float Util_fadeB(float x){
   int index;
   index = int_clip(float_to_int((31.f * x)),0,31);
   return (float_wrap_array(Util_fadeB_c0)[index] + (x * (float_wrap_array(Util_fadeB_c1)[index] + (float_wrap_array(Util_fadeB_c2)[index] * x))));
}

float Stabile_calc_g(float cv, float fs){
   float pitch;
   pitch = Util_cvToPitch(cv);
   float f;
   f = (8.17579891564f * expf((0.0577622650467f * pitch)));
   float wd;
   wd = (6.28318530718f * f);
   float T;
   T = (1.f / fs);
   float wa;
   wa = ((2.f / T) * tanf((wd * T * 0.5f)));
   float g;
   g = (wa * T * 0.5f);
   return g;
}

float Stabile_calc_g_44100(float cv){
   int index;
   index = int_clip(float_to_int((127.f * cv)),0,127);
   return (float_wrap_array(Stabile_calc_g_44100_c0)[index] + (cv * (float_wrap_array(Stabile_calc_g_44100_c1)[index] + (float_wrap_array(Stabile_calc_g_44100_c2)[index] * cv))));
}

float Stabile_calc_g_48000(float cv){
   int index;
   index = int_clip(float_to_int((127.f * cv)),0,127);
   return (float_wrap_array(Stabile_calc_g_48000_c0)[index] + (cv * (float_wrap_array(Stabile_calc_g_48000_c1)[index] + (float_wrap_array(Stabile_calc_g_48000_c2)[index] * cv))));
}

float Stabile_calc_g_88200(float cv){
   int index;
   index = int_clip(float_to_int((127.f * cv)),0,127);
   return (float_wrap_array(Stabile_calc_g_88200_c0)[index] + (cv * (float_wrap_array(Stabile_calc_g_88200_c1)[index] + (float_wrap_array(Stabile_calc_g_88200_c2)[index] * cv))));
}

float Stabile_calc_g_96000(float cv){
   int index;
   index = int_clip(float_to_int((127.f * cv)),0,127);
   return (float_wrap_array(Stabile_calc_g_96000_c0)[index] + (cv * (float_wrap_array(Stabile_calc_g_96000_c1)[index] + (float_wrap_array(Stabile_calc_g_96000_c2)[index] * cv))));
}

float Stabile_calc_g_176400(float cv){
   int index;
   index = int_clip(float_to_int((127.f * cv)),0,127);
   return (float_wrap_array(Stabile_calc_g_176400_c0)[index] + (cv * (float_wrap_array(Stabile_calc_g_176400_c1)[index] + (float_wrap_array(Stabile_calc_g_176400_c2)[index] * cv))));
}

float Stabile_calc_g_192000(float cv){
   int index;
   index = int_clip(float_to_int((127.f * cv)),0,127);
   return (float_wrap_array(Stabile_calc_g_192000_c0)[index] + (cv * (float_wrap_array(Stabile_calc_g_192000_c1)[index] + (float_wrap_array(Stabile_calc_g_192000_c2)[index] * cv))));
}

float Stabile_tune(float cv){
   float fs;
   fs = getSampleRate();
   float g;
   g = 0.f;
   uint8_t _cond_66;
   _cond_66 = (fs == 44100.f);
   if(_cond_66){
      g = Stabile_calc_g_44100(cv);
   }
   else
   {
      uint8_t _cond_65;
      _cond_65 = (fs == 48000.f);
      if(_cond_65){
         g = Stabile_calc_g_48000(cv);
      }
      else
      {
         uint8_t _cond_64;
         _cond_64 = (fs == 88200.f);
         if(_cond_64){
            g = Stabile_calc_g_88200(cv);
         }
         else
         {
            uint8_t _cond_63;
            _cond_63 = (fs == 96000.f);
            if(_cond_63){
               g = Stabile_calc_g_96000(cv);
            }
            else
            {
               uint8_t _cond_62;
               _cond_62 = (fs == 176400.f);
               if(_cond_62){
                  g = Stabile_calc_g_176400(cv);
               }
               else
               {
                  uint8_t _cond_61;
                  _cond_61 = (fs == 192000.f);
                  if(_cond_61){
                     g = Stabile_calc_g_192000(cv);
                  }
                  else
                  {
                     g = Stabile_calc_g(cv,getSampleRate());
                  }
               }
            }
         }
      }
   }
   return g;
}

void Stabile__ctx_type_8_init(Stabile__ctx_type_8 &_output_){
   Stabile__ctx_type_8 _ctx;
   _ctx.z2 = 0.f;
   _ctx.z1 = 0.f;
   _ctx.inv_den = 0.f;
   _ctx.g = 0.f;
   Util__ctx_type_3_init(_ctx._inst58);
   Util__ctx_type_3_init(_ctx._inst57);
   _ctx.R = 0.f;
   Stabile_default(_ctx);
   _output_ = _ctx;
   return ;
}

void Stabile_process_init(Stabile__ctx_type_8 &_output_){
   Stabile__ctx_type_8_init(_output_);
   return ;
}

void Stabile_process(Stabile__ctx_type_8 &_ctx, float x, float cv, float q, float semblance, _tuple___real_real_real_real__ &_output_){
   q = (q + 0.5f);
   uint8_t _cond_67;
   _cond_67 = (Util_change(_ctx._inst57,cv) || Util_change(_ctx._inst58,q));
   if(_cond_67){
      _ctx.g = Stabile_tune(cv);
      _ctx.R = (1.f / (2.f * (q + 1e-18f)));
      _ctx.inv_den = (1.f / (1.f + (2.f * _ctx.R * _ctx.g) + (_ctx.g * _ctx.g)));
   }
   float high;
   high = ((x + (- (((2.f * _ctx.R) + _ctx.g) * _ctx.z1)) + (- _ctx.z2)) * _ctx.inv_den);
   float band;
   band = ((_ctx.g * high) + _ctx.z1);
   float low;
   low = ((_ctx.g * band) + _ctx.z2);
   _ctx.z1 = ((_ctx.g * high) + band);
   _ctx.z2 = ((_ctx.g * band) + low);
   float sem;
   sem = ((Util_fadeA(semblance) * low) + (Util_fadeB(semblance) * high));
   _tuple___real_real_real_real__ _tuple_68;
   {
      _tuple_68.field_0 = low;
      _tuple_68.field_1 = band;
      _tuple_68.field_2 = high;
      _tuple_68.field_3 = sem;
   }
   _output_ = _tuple_68;
   return ;
}

void Stabile_default_init(Stabile__ctx_type_8 &_output_){
   Stabile__ctx_type_8_init(_output_);
   return ;
}

void Stabile_default(Stabile__ctx_type_8 &_ctx){
   _ctx.g = Stabile_calc_g(0.f,getSampleRate());
   _ctx.R = 1.f;
   _ctx.inv_den = (1.f / (1.f + (_ctx.g * _ctx.g)));
}

void Tricore__ctx_type_0_init(Tricore__ctx_type_0 &_output_){
   Tricore__ctx_type_0 _ctx;
   _ctx.reset_state = 0;
   _ctx.reset_phase = 0.f;
   _ctx.phase = 0.f;
   Util__ctx_type_2_init(_ctx._inst79);
   Util__ctx_type_2_init(_ctx._inst78);
   Util__ctx_type_17_init(_ctx._inst76);
   _output_ = _ctx;
   return ;
}

void Tricore_process_init(Tricore__ctx_type_0 &_output_){
   Tricore__ctx_type_0_init(_output_);
   return ;
}

float Tricore_process(Tricore__ctx_type_0 &_ctx, float cv, float reset, float disable){
   uint8_t bdisable;
   bdisable = (disable > 0.5f);
   uint8_t _cond_85;
   _cond_85 = bool_not(_ctx.reset_state);
   if(_cond_85){
      _ctx.phase = (_ctx.phase + Util_cvToRate(_ctx._inst76,cv));
      uint8_t _cond_84;
      _cond_84 = (_ctx.phase > 1.f);
      if(_cond_84){
         _ctx.phase = (_ctx.phase + -1.f);
      }
   }
   float sine_out;
   sine_out = Util_sine(_ctx.phase);
   uint8_t _cond_86;
   _cond_86 = (Util_edge(_ctx._inst78,(reset > 0.f)) || Util_edge(_ctx._inst79,bdisable));
   if(_cond_86){
      _ctx.reset_phase = 1.f;
      _ctx.reset_state = 1;
   }
   float reset_out;
   reset_out = 1.f;
   if(_ctx.reset_state){
      uint8_t _cond_88;
      _cond_88 = (fabsf(_ctx.reset_phase) > 0.001f);
      if(_cond_88){
         float reset_speed;
         reset_speed = 0.01f;
         _ctx.reset_phase = (_ctx.reset_phase + (- (_ctx.reset_phase * reset_speed)));
      }
      else
      {
         uint8_t _cond_87;
         _cond_87 = (_ctx.reset_phase > 0.001f);
         if(bool_not(_cond_87)){ _ctx.reset_phase = 0.f; }
         _ctx.reset_state = 0;
         _ctx.phase = 0.f;
      }
      reset_out = _ctx.reset_phase;
   }
   return (reset_out * sine_out);
}

float Tohe_tone_k1(float g){
   int index;
   index = int_clip(float_to_int((15.5f * (g + 1.f))),0,31);
   return (float_wrap_array(Tohe_tone_k1_c0)[index] + (g * (float_wrap_array(Tohe_tone_k1_c1)[index] + (float_wrap_array(Tohe_tone_k1_c2)[index] * g))));
}

float Tohe_tone_k0(float g){
   int index;
   index = int_clip(float_to_int((15.5f * (g + 1.f))),0,31);
   return (float_wrap_array(Tohe_tone_k0_c0)[index] + (g * (float_wrap_array(Tohe_tone_k0_c1)[index] + (float_wrap_array(Tohe_tone_k0_c2)[index] * g))));
}

void Tohe__ctx_type_2_init(Tohe__ctx_type_2 &_output_){
   Tohe__ctx_type_2 _ctx;
   _ctx.w1 = 0.f;
   _ctx.k1 = 0.f;
   _ctx.k0 = 0.f;
   _ctx.comp = 0.f;
   Util__ctx_type_3_init(_ctx._inst92);
   Tohe_start(_ctx);
   _output_ = _ctx;
   return ;
}

void Tohe_do_init(Tohe__ctx_type_2 &_output_){
   Tohe__ctx_type_2_init(_output_);
   return ;
}

float Tohe_do(Tohe__ctx_type_2 &_ctx, float x, float gain){
   uint8_t _cond_95;
   _cond_95 = Util_change(_ctx._inst92,gain);
   if(_cond_95){
      _ctx.k1 = Tohe_tone_k1(gain);
      _ctx.k0 = Tohe_tone_k0(gain);
      _ctx.comp = Util_map(fabsf(gain),0.f,1.f,1.f,1.8f);
   }
   float w0;
   w0 = (x + (- (_ctx.k0 * _ctx.w1)));
   float y0;
   y0 = ((_ctx.k0 * w0) + _ctx.w1);
   _ctx.w1 = w0;
   float sign;
   uint8_t _cond_96;
   _cond_96 = (gain < 0.f);
   if(_cond_96){ sign = -1.f; }
   else
   { sign = 1.f; }
   return (((_ctx.k1 * (x + (sign * y0)) * 0.5f) + x) * _ctx.comp);
}

void Tohe_start_init(Tohe__ctx_type_2 &_output_){
   Tohe__ctx_type_2_init(_output_);
   return ;
}

void Tohe_start(Tohe__ctx_type_2 &_ctx){
   _ctx.k1 = 0.f;
   _ctx.k0 = -0.852723285867f;
   _ctx.comp = 1.f;
}

void Swept__ctx_type_0_init(Swept__ctx_type_0 &_output_){
   Swept__ctx_type_0 _ctx;
   _ctx.out = 0.f;
   Util__ctx_type_2_init(_ctx._inst98);
   _output_ = _ctx;
   return ;
}

void Swept_process_init(Swept__ctx_type_0 &_output_){
   Swept__ctx_type_0_init(_output_);
   return ;
}

float Swept_process(Swept__ctx_type_0 &_ctx, float gate, float start, float end, float rate){
   uint8_t bgate;
   bgate = (gate > 0.5f);
   _ctx.out = (_ctx.out + ((end + (- _ctx.out)) * rate * 0.004f * Util_sampleRateScale()));
   uint8_t _cond_104;
   _cond_104 = Util_edge(_ctx._inst98,bgate);
   if(_cond_104){
      _ctx.out = start;
   }
   return _ctx.out;
}

void Swept_noteOn_init(Swept__ctx_type_0 &_output_){
   Swept__ctx_type_0_init(_output_);
   return ;
}

void Swept_noteOn(Swept__ctx_type_0 &_ctx, int note, int velocity, int channel){
}

void Swept_noteOff_init(Swept__ctx_type_0 &_output_){
   Swept__ctx_type_0_init(_output_);
   return ;
}

void Swept_noteOff(Swept__ctx_type_0 &_ctx, int note, int channel){
}

void Swept_controlChange_init(Swept__ctx_type_0 &_output_){
   Swept__ctx_type_0_init(_output_);
   return ;
}

void Swept_controlChange(Swept__ctx_type_0 &_ctx, int control, int value, int channel){
}

void Swept_default_init(Swept__ctx_type_0 &_output_){
   Swept__ctx_type_0_init(_output_);
   return ;
}

void Swept_default(Swept__ctx_type_0 &_ctx){
}

void Noise__ctx_type_0_init(Noise__ctx_type_0 &_output_){
   Noise__ctx_type_0 _ctx;
   _ctx.x2 = 0;
   _ctx.x1 = 0;
   Util__ctx_type_2_init(_ctx._inst106);
   _output_ = _ctx;
   return ;
}

void Noise_process_init(Noise__ctx_type_0 &_output_){
   Noise__ctx_type_0_init(_output_);
   return ;
}

float Noise_process(Noise__ctx_type_0 &_ctx, float gate){
   _ctx.x1 = (((_ctx.x1 * 17389) + 7919) % 32768);
   float y1;
   y1 = (int_to_float(_ctx.x1) * 3.0517578125e-05f);
   _ctx.x2 = (((_ctx.x2 * 27449) + 12553) % 32768);
   float y2;
   y2 = (int_to_float(_ctx.x2) * 3.0517578125e-05f);
   float out;
   out = (y1 + (- y2));
   uint8_t _cond_112;
   _cond_112 = Util_edge(_ctx._inst106,(gate > 0.1f));
   if(_cond_112){
      _ctx.x1 = 0;
      _ctx.x2 = 0;
   }
   return out;
}

void Noise_noteOn_init(Noise__ctx_type_0 &_output_){
   Noise__ctx_type_0_init(_output_);
   return ;
}

void Noise_noteOn(Noise__ctx_type_0 &_ctx, int note, int velocity, int channel){
}

void Noise_noteOff_init(Noise__ctx_type_0 &_output_){
   Noise__ctx_type_0_init(_output_);
   return ;
}

void Noise_noteOff(Noise__ctx_type_0 &_ctx, int note, int channel){
}

void Noise_controlChange_init(Noise__ctx_type_0 &_output_){
   Noise__ctx_type_0_init(_output_);
   return ;
}

void Noise_controlChange(Noise__ctx_type_0 &_ctx, int control, int value, int channel){
}

void Noise_default_init(Noise__ctx_type_0 &_output_){
   Noise__ctx_type_0_init(_output_);
   return ;
}

void Noise_default(Noise__ctx_type_0 &_ctx){
}

void Decimate__ctx_type_0_init(Decimate__ctx_type_0 &_output_){
   Decimate__ctx_type_0 _ctx;
   _ctx.out = 0.f;
   _ctx.count = 0;
   _output_ = _ctx;
   return ;
}

void Decimate_decimate_init(Decimate__ctx_type_0 &_output_){
   Decimate__ctx_type_0_init(_output_);
   return ;
}

float Decimate_decimate(Decimate__ctx_type_0 &_ctx, float in, float factor){
   int n;
   n = float_to_int((127.f * factor));
   n = int_clip(n,0,127);
   _ctx.count = (_ctx.count + 1);
   uint8_t _cond_115;
   _cond_115 = (_ctx.count > n);
   if(_cond_115){
      _ctx.count = 0;
      _ctx.out = in;
   }
   return _ctx.out;
}

void Ahr__ctx_type_0_init(Ahr__ctx_type_0 &_output_){
   Ahr__ctx_type_0 _ctx;
   _ctx.target = 0.f;
   _ctx.state = 0;
   _ctx.rate = 0.f;
   _ctx.out = 0.f;
   _ctx.hold_phase = 0.f;
   Util__ctx_type_2_init(_ctx._inst119);
   Util__ctx_type_2_init(_ctx._inst117);
   _output_ = _ctx;
   return ;
}

void Ahr_do_init(Ahr__ctx_type_0 &_output_){
   Ahr__ctx_type_0_init(_output_);
   return ;
}

void Ahr_do(Ahr__ctx_type_0 &_ctx, float gate, float a, float h, float r, _tuple___real_real__ &_output_){
   int release;
   release = 0;
   int attack;
   attack = 1;
   int hold;
   hold = 2;
   int reset;
   reset = 3;
   uint8_t bgate;
   bgate = (gate > 0.f);
   uint8_t _cond_136;
   _cond_136 = Util_edge(_ctx._inst117,bgate);
   if(_cond_136){
      _ctx.state = reset;
   }
   float resetting;
   uint8_t _cond_145;
   _cond_145 = (_ctx.state == reset);
   if(_cond_145){ resetting = 1.f; }
   else
   { resetting = 0.f; }
   uint8_t _cond_137;
   _cond_137 = Util_edge(_ctx._inst119,(_ctx.out > 1024.f));
   if(_cond_137){
      _ctx.hold_phase = 0.f;
      _ctx.state = hold;
   }
   uint8_t _cond_138;
   _cond_138 = ((_ctx.out < 10.f) && (_ctx.state == reset));
   if(_cond_138){
      _ctx.state = attack;
   }
   uint8_t _cond_139;
   _cond_139 = ((_ctx.hold_phase > 100.f) && (_ctx.state == hold));
   if(_cond_139){
      _ctx.state = release;
   }
   uint8_t _cond_140;
   _cond_140 = (_ctx.state == reset);
   if(_cond_140){
      _ctx.rate = 1.81818181818f;
      _ctx.target = 0.f;
   }
   uint8_t _cond_141;
   _cond_141 = (_ctx.state == attack);
   if(_cond_141){
      _ctx.rate = (1.f / ((100.f * a) + 0.05f));
      _ctx.target = 1228.8f;
   }
   uint8_t _cond_142;
   _cond_142 = (_ctx.state == hold);
   if(_cond_142){
      float hrate;
      hrate = (1.f / ((100.f * h) + 0.05f));
      _ctx.hold_phase = (_ctx.hold_phase + hrate);
   }
   uint8_t _cond_143;
   _cond_143 = (_ctx.state == release);
   if(_cond_143){
      _ctx.rate = (1.f / ((200.f * r) + 0.01f));
      _ctx.target = 0.f;
   }
   _ctx.out = (_ctx.out + ((_ctx.target + (- _ctx.out)) * _ctx.rate * 0.005f * Util_sampleRateScale()));
   _tuple___real_real__ _tuple_144;
   {
      _tuple_144.field_0 = float_clip((_ctx.out * 0.0009765625f),0.f,1.f);
      _tuple_144.field_1 = resetting;
   }
   _output_ = _tuple_144;
   return ;
}

void Ahr__ctx_type_1_init(Ahr__ctx_type_1 &_output_){
   Ahr__ctx_type_1 _ctx;
   _ctx.knob3 = 0.f;
   _ctx.knob2 = 0.f;
   _ctx.knob1 = 0.f;
   Ahr__ctx_type_0_init(_ctx._inst128);
   _output_ = _ctx;
   return ;
}

void Ahr_process_init(Ahr__ctx_type_1 &_output_){
   Ahr__ctx_type_1_init(_output_);
   return ;
}

void Ahr_process(Ahr__ctx_type_1 &_ctx, float gate, _tuple___real_real__ &_output_){
   _tuple___real_real__ _call_147;
   Ahr_do(_ctx._inst128,gate,_ctx.knob1,_ctx.knob2,_ctx.knob3,_call_147);
   _output_ = _call_147;
   return ;
}

void Ahr_noteOn_init(Ahr__ctx_type_1 &_output_){
   Ahr__ctx_type_1_init(_output_);
   return ;
}

void Ahr_noteOn(Ahr__ctx_type_1 &_ctx, int note, int velocity, int channel){
}

void Ahr_noteOff_init(Ahr__ctx_type_1 &_output_){
   Ahr__ctx_type_1_init(_output_);
   return ;
}

void Ahr_noteOff(Ahr__ctx_type_1 &_ctx, int note, int channel){
}

void Ahr_controlChange_init(Ahr__ctx_type_1 &_output_){
   Ahr__ctx_type_1_init(_output_);
   return ;
}

void Ahr_controlChange(Ahr__ctx_type_1 &_ctx, int control, int value, int channel){
   uint8_t _cond_149;
   _cond_149 = (control == 1);
   if(_cond_149){
      _ctx.knob1 = (int_to_float(value) * 0.00787401574803f);
   }
   uint8_t _cond_150;
   _cond_150 = (control == 2);
   if(_cond_150){
      _ctx.knob2 = (int_to_float(value) * 0.00787401574803f);
   }
   uint8_t _cond_151;
   _cond_151 = (control == 3);
   if(_cond_151){
      _ctx.knob3 = (int_to_float(value) * 0.00787401574803f);
   }
}

void Ahr_default_init(Ahr__ctx_type_1 &_output_){
   Ahr__ctx_type_1_init(_output_);
   return ;
}

void Ahr_default(Ahr__ctx_type_1 &_ctx){
   _ctx.knob1 = 0.f;
   _ctx.knob2 = 0.5f;
   _ctx.knob3 = 0.5f;
}

void Trummor__ctx_type_0_init(Trummor__ctx_type_0 &_output_){
   Trummor__ctx_type_0 _ctx;
   _ctx.tone = 0.f;
   _ctx.pitch = 0.f;
   _ctx.level2 = 0.f;
   _ctx.level1 = 0.f;
   _ctx.int_osc = 0.f;
   _ctx.int_noise = 0.f;
   _ctx.ext_osc = 0.f;
   _ctx.ext_noise = 0.f;
   _ctx.env2_scale = 0.f;
   _ctx.env2_r = 0.f;
   _ctx.env2_h = 0.f;
   _ctx.env2_a = 0.f;
   _ctx.env1_scale = 0.f;
   _ctx.env1_r = 0.f;
   _ctx.env1_h = 0.f;
   _ctx.env1_a = 0.f;
   _ctx.drive = 0.f;
   _ctx.decimate = 0.f;
   _ctx.bend = 0.f;
   Tohe__ctx_type_2_init(_ctx._inst167);
   Decimate__ctx_type_0_init(_ctx._inst166);
   Noise__ctx_type_0_init(_ctx._inst165);
   Ahr__ctx_type_0_init(_ctx._inst164);
   Tricore__ctx_type_0_init(_ctx._inst163);
   Swept__ctx_type_0_init(_ctx._inst162);
   Ahr__ctx_type_0_init(_ctx._inst161);
   _output_ = _ctx;
   return ;
}

void Trummor_do_init(Trummor__ctx_type_0 &_output_){
   Trummor__ctx_type_0_init(_output_);
   return ;
}

void Trummor_do(Trummor__ctx_type_0 &_ctx, float gate, float osc_in, float noise_in, _tuple___real_real_real_real__ &_output_){
   float osc_env;
   float env_reset;
   _tuple___real_real__ _call_185;
   Ahr_do(_ctx._inst161,gate,(_ctx.env1_scale * _ctx.env1_a),(_ctx.env1_scale * _ctx.env1_h),(_ctx.env1_scale * _ctx.env1_r),_call_185);
   osc_env = _call_185.field_0;env_reset = _call_185.field_1;
   float cv;
   cv = Swept_process(_ctx._inst162,(1.f + (- env_reset)),(_ctx.pitch + (_ctx.bend * 0.4f)),_ctx.pitch,0.1f);
   float osc;
   osc = ((_ctx.int_osc * Tricore_process(_ctx._inst163,cv,0.f,env_reset)) + (_ctx.ext_osc * osc_in));
   float osc_sat;
   osc_sat = Util_saturate(((_ctx.drive + 1.f) * osc));
   float noise_env;
   _tuple___real_real__ _call_186;
   Ahr_do(_ctx._inst164,gate,(_ctx.env2_scale * _ctx.env2_a),(_ctx.env2_scale * _ctx.env2_h),(_ctx.env2_scale * _ctx.env2_r),_call_186);
   noise_env = _call_186.field_0;
   float noise_osc;
   uint8_t _cond_190;
   _cond_190 = (_ctx.decimate == 0.f);
   if(_cond_190){ noise_osc = ((_ctx.int_noise * (float_random() + -0.5f)) + (_ctx.ext_noise * noise_in)); }
   else
   { noise_osc = Decimate_decimate(_ctx._inst166,((_ctx.int_noise * Noise_process(_ctx._inst165,gate)) + (_ctx.ext_noise * noise_in)),_ctx.decimate); }
   noise_osc = Tohe_do(_ctx._inst167,noise_osc,_ctx.tone);
   float output;
   output = ((_ctx.level1 * osc_env * osc_sat) + (_ctx.level2 * noise_env * noise_osc));
   _tuple___real_real_real_real__ _tuple_187;
   {
      _tuple_187.field_0 = output;
      _tuple_187.field_1 = cv;
      _tuple_187.field_2 = osc_env;
      _tuple_187.field_3 = noise_env;
   }
   _output_ = _tuple_187;
   return ;
}

void Trummor_setLevel1_init(Trummor__ctx_type_0 &_output_){
   Trummor__ctx_type_0_init(_output_);
   return ;
}

void Trummor_setLevel1(Trummor__ctx_type_0 &_ctx, float value){
   _ctx.level1 = float_clip(value,0.f,1.f);
}

void Trummor_setLevel2_init(Trummor__ctx_type_0 &_output_){
   Trummor__ctx_type_0_init(_output_);
   return ;
}

void Trummor_setLevel2(Trummor__ctx_type_0 &_ctx, float value){
   _ctx.level2 = float_clip(value,0.f,1.f);
}

void Trummor_setEnv1A_init(Trummor__ctx_type_0 &_output_){
   Trummor__ctx_type_0_init(_output_);
   return ;
}

void Trummor_setEnv1A(Trummor__ctx_type_0 &_ctx, float value){
   _ctx.env1_a = float_clip(value,0.f,1.f);
}

void Trummor_setEnv1H_init(Trummor__ctx_type_0 &_output_){
   Trummor__ctx_type_0_init(_output_);
   return ;
}

void Trummor_setEnv1H(Trummor__ctx_type_0 &_ctx, float value){
   _ctx.env1_h = float_clip(value,0.f,1.f);
}

void Trummor_setEnv1R_init(Trummor__ctx_type_0 &_output_){
   Trummor__ctx_type_0_init(_output_);
   return ;
}

void Trummor_setEnv1R(Trummor__ctx_type_0 &_ctx, float value){
   _ctx.env1_r = float_clip(value,0.f,1.f);
}

void Trummor_setEnv2A_init(Trummor__ctx_type_0 &_output_){
   Trummor__ctx_type_0_init(_output_);
   return ;
}

void Trummor_setEnv2A(Trummor__ctx_type_0 &_ctx, float value){
   _ctx.env2_a = float_clip(value,0.f,1.f);
}

void Trummor_setEnv2H_init(Trummor__ctx_type_0 &_output_){
   Trummor__ctx_type_0_init(_output_);
   return ;
}

void Trummor_setEnv2H(Trummor__ctx_type_0 &_ctx, float value){
   _ctx.env2_h = float_clip(value,0.f,1.f);
}

void Trummor_setEnv2R_init(Trummor__ctx_type_0 &_output_){
   Trummor__ctx_type_0_init(_output_);
   return ;
}

void Trummor_setEnv2R(Trummor__ctx_type_0 &_ctx, float value){
   _ctx.env2_r = float_clip(value,0.f,1.f);
}

void Trummor_setPitch_init(Trummor__ctx_type_0 &_output_){
   Trummor__ctx_type_0_init(_output_);
   return ;
}

void Trummor_setPitch(Trummor__ctx_type_0 &_ctx, float value){
   _ctx.pitch = float_clip(value,-1.f,1.f);
}

void Trummor_setBend_init(Trummor__ctx_type_0 &_output_){
   Trummor__ctx_type_0_init(_output_);
   return ;
}

void Trummor_setBend(Trummor__ctx_type_0 &_ctx, float value){
   _ctx.bend = float_clip(value,-1.f,1.f);
}

void Trummor_setDrive_init(Trummor__ctx_type_0 &_output_){
   Trummor__ctx_type_0_init(_output_);
   return ;
}

void Trummor_setDrive(Trummor__ctx_type_0 &_ctx, float value){
   _ctx.drive = float_clip(value,0.f,1.f);
}

void Trummor_setTone_init(Trummor__ctx_type_0 &_output_){
   Trummor__ctx_type_0_init(_output_);
   return ;
}

void Trummor_setTone(Trummor__ctx_type_0 &_ctx, float value){
   _ctx.tone = float_clip(value,-1.f,1.f);
}

void Trummor_setOscBlend_init(Trummor__ctx_type_0 &_output_){
   Trummor__ctx_type_0_init(_output_);
   return ;
}

void Trummor_setOscBlend(Trummor__ctx_type_0 &_ctx, float value){
   _ctx.int_osc = Util_fadeA(value);
   _ctx.ext_osc = Util_fadeB(value);
}

void Trummor_setNoiseBlend_init(Trummor__ctx_type_0 &_output_){
   Trummor__ctx_type_0_init(_output_);
   return ;
}

void Trummor_setNoiseBlend(Trummor__ctx_type_0 &_ctx, float value){
   _ctx.int_noise = Util_fadeA(value);
   _ctx.ext_noise = Util_fadeB(value);
}

void Trummor_setEnv1Scale_init(Trummor__ctx_type_0 &_output_){
   Trummor__ctx_type_0_init(_output_);
   return ;
}

void Trummor_setEnv1Scale(Trummor__ctx_type_0 &_ctx, float value){
   uint8_t _cond_192;
   _cond_192 = (value < 0.5f);
   if(_cond_192){ _ctx.env1_scale = 1.f; }
   else
   { _ctx.env1_scale = 0.2f; }
}

void Trummor_setEnv2Scale_init(Trummor__ctx_type_0 &_output_){
   Trummor__ctx_type_0_init(_output_);
   return ;
}

void Trummor_setEnv2Scale(Trummor__ctx_type_0 &_ctx, float value){
   uint8_t _cond_193;
   _cond_193 = (value < 0.5f);
   if(_cond_193){ _ctx.env2_scale = 1.f; }
   else
   { _ctx.env2_scale = 0.2f; }
}

void Trummor_setDecimate_init(Trummor__ctx_type_0 &_output_){
   Trummor__ctx_type_0_init(_output_);
   return ;
}

void Trummor_setDecimate(Trummor__ctx_type_0 &_ctx, float value){
   _ctx.decimate = float_clip(value,0.f,1.f);
}

float Tangents_tune(float cut, float fs, float oversampling){
   float f;
   f = Util_cvTokHz(cut);
   float fh;
   fh = ((6.28318530718f * f) / (oversampling * fs));
   return fh;
}

float Tangents_tune_44100(float cut){
   int index;
   index = int_clip(float_to_int((127.f * cut)),0,127);
   return (float_wrap_array(Tangents_tune_44100_c0)[index] + (cut * (float_wrap_array(Tangents_tune_44100_c1)[index] + (float_wrap_array(Tangents_tune_44100_c2)[index] * cut))));
}

float Tangents_tune_48000(float cut){
   int index;
   index = int_clip(float_to_int((127.f * cut)),0,127);
   return (float_wrap_array(Tangents_tune_48000_c0)[index] + (cut * (float_wrap_array(Tangents_tune_48000_c1)[index] + (float_wrap_array(Tangents_tune_48000_c2)[index] * cut))));
}

float Tangents_tune_88200(float cut){
   int index;
   index = int_clip(float_to_int((127.f * cut)),0,127);
   return (float_wrap_array(Tangents_tune_88200_c0)[index] + (cut * (float_wrap_array(Tangents_tune_88200_c1)[index] + (float_wrap_array(Tangents_tune_88200_c2)[index] * cut))));
}

float Tangents_tune_96000(float cut){
   int index;
   index = int_clip(float_to_int((127.f * cut)),0,127);
   return (float_wrap_array(Tangents_tune_96000_c0)[index] + (cut * (float_wrap_array(Tangents_tune_96000_c1)[index] + (float_wrap_array(Tangents_tune_96000_c2)[index] * cut))));
}

float Tangents_tune_176400(float cut){
   int index;
   index = int_clip(float_to_int((127.f * cut)),0,127);
   return (float_wrap_array(Tangents_tune_176400_c0)[index] + (cut * (float_wrap_array(Tangents_tune_176400_c1)[index] + (float_wrap_array(Tangents_tune_176400_c2)[index] * cut))));
}

float Tangents_tune_192000(float cut){
   int index;
   index = int_clip(float_to_int((127.f * cut)),0,127);
   return (float_wrap_array(Tangents_tune_192000_c0)[index] + (cut * (float_wrap_array(Tangents_tune_192000_c1)[index] + (float_wrap_array(Tangents_tune_192000_c2)[index] * cut))));
}

float Tangents_getTune(float cut, float fs){
   uint8_t _cond_238;
   _cond_238 = (fs == 44100.f);
   if(_cond_238){
      return Tangents_tune_44100(cut);
   }
   else
   {
      uint8_t _cond_237;
      _cond_237 = (fs == 48000.f);
      if(_cond_237){
         return Tangents_tune_48000(cut);
      }
      else
      {
         uint8_t _cond_236;
         _cond_236 = (fs == 88200.f);
         if(_cond_236){
            return Tangents_tune_88200(cut);
         }
         else
         {
            uint8_t _cond_235;
            _cond_235 = (fs == 96000.f);
            if(_cond_235){
               return Tangents_tune_96000(cut);
            }
            else
            {
               uint8_t _cond_234;
               _cond_234 = (fs == 176400.f);
               if(_cond_234){
                  return Tangents_tune_176400(cut);
               }
               else
               {
                  uint8_t _cond_233;
                  _cond_233 = (fs == 192000.f);
                  if(_cond_233){
                     return Tangents_tune_192000(cut);
                  }
                  else
                  {
                     return Tangents_tune(cut,fs,4.f);
                  }
               }
            }
         }
      }
   }
}

void Tangents__ctx_type_8_init(Tangents__ctx_type_8 &_output_){
   Tangents__ctx_type_8 _ctx;
   _ctx.p1 = 0.f;
   _ctx.p0 = 0.f;
   _output_ = _ctx;
   return ;
}

void Tangents_heun_init(Tangents__ctx_type_8 &_output_){
   Tangents__ctx_type_8_init(_output_);
   return ;
}

float Tangents_heun(Tangents__ctx_type_8 &_ctx, float lp, float bp, float hp, float wh, float cut, float res){
   float resfactor;
   resfactor = 3.f;
   float yt;
   yt = Util_cubic_clipper((hp + _ctx.p0));
   float feedt;
   feedt = (resfactor * res * yt);
   float dpt0;
   dpt0 = ((bp + (- hp) + feedt + (- _ctx.p0) + _ctx.p1) * wh);
   float dpt1;
   dpt1 = (((-2.f * bp) + hp + lp + (-2.f * feedt) + _ctx.p0 + (-2.f * _ctx.p1)) * wh);
   float pt0;
   pt0 = (_ctx.p0 + dpt0);
   float pt1;
   pt1 = (_ctx.p1 + dpt1);
   float yn;
   yn = Util_cubic_clipper((hp + pt0));
   float feed;
   feed = (resfactor * res * yn);
   float dp0;
   dp0 = ((bp + (- hp) + feed + (- pt0) + pt1) * wh);
   float dp1;
   dp1 = (((-2.f * bp) + hp + lp + (-2.f * feed) + pt0 + (-2.f * pt1)) * wh);
   _ctx.p0 = (_ctx.p0 + ((dp0 + dpt0) * 0.5f));
   _ctx.p1 = (_ctx.p1 + ((dp1 + dpt1) * 0.5f));
   return Util_cubic_clipper((hp + _ctx.p0));
}

void Tangents__ctx_type_9_init(Tangents__ctx_type_9 &_output_){
   Tangents__ctx_type_9 _ctx;
   Tangents__ctx_type_8_init(_ctx.h);
   _ctx.fh = 0.f;
   Util__ctx_type_3_init(_ctx._inst223);
   Util__ctx_type_3_init(_ctx._inst222);
   _output_ = _ctx;
   return ;
}

void Tangents_process_heun_init(Tangents__ctx_type_9 &_output_){
   Tangents__ctx_type_9_init(_output_);
   return ;
}

float Tangents_process_heun(Tangents__ctx_type_9 &_ctx, float lp, float bp, float hp, float cut, float res){
   float fs;
   fs = getSampleRate();
   uint8_t _cond_239;
   _cond_239 = (Util_change(_ctx._inst222,cut) || Util_change(_ctx._inst223,fs));
   if(_cond_239){
      _ctx.fh = Tangents_getTune(cut,fs);
   }
   float out;
   out = 0.f;
   uint8_t _cond_241;
   _cond_241 = ((fs == 176400.f) || (fs == 192000.f));
   if(_cond_241){
      out = Tangents_heun(_ctx.h,lp,bp,hp,_ctx.fh,cut,res);
   }
   else
   {
      uint8_t _cond_240;
      _cond_240 = ((fs == 88200.f) || (fs == 96000.f));
      if(_cond_240){
         out = Tangents_heun(_ctx.h,lp,bp,hp,_ctx.fh,cut,res);
         out = Tangents_heun(_ctx.h,lp,bp,hp,_ctx.fh,cut,res);
      }
      else
      {
         out = Tangents_heun(_ctx.h,lp,bp,hp,_ctx.fh,cut,res);
         out = Tangents_heun(_ctx.h,lp,bp,hp,_ctx.fh,cut,res);
         out = Tangents_heun(_ctx.h,lp,bp,hp,_ctx.fh,cut,res);
         out = Tangents_heun(_ctx.h,lp,bp,hp,_ctx.fh,cut,res);
      }
   }
   return out;
}

void Tangents__ctx_type_10_init(Tangents__ctx_type_10 &_output_){
   Tangents__ctx_type_10 _ctx;
   _ctx.x1 = 0;
   _output_ = _ctx;
   return ;
}

void Tangents_simple_noise_init(Tangents__ctx_type_10 &_output_){
   Tangents__ctx_type_10_init(_output_);
   return ;
}

float Tangents_simple_noise(Tangents__ctx_type_10 &_ctx){
   _ctx.x1 = (((_ctx.x1 * 17389) + 7919) % 32768);
   float y1;
   y1 = (int_to_float(_ctx.x1) * 3.0517578125e-05f);
   return y1;
}

void Tangents__ctx_type_11_init(Tangents__ctx_type_11 &_output_){
   Tangents__ctx_type_11 _ctx;
   Tangents__ctx_type_9_init(_ctx._inst232);
   Util__ctx_type_18_init(_ctx._inst231);
   _output_ = _ctx;
   return ;
}

void Tangents_process_init(Tangents__ctx_type_11 &_output_){
   Tangents__ctx_type_11_init(_output_);
   return ;
}

float Tangents_process(Tangents__ctx_type_11 &_ctx, float lp, float bp, float hp, float cut_in, float res_in){
   float res;
   res = Util_polylog(res_in);
   float comp;
   comp = Util_map(res,0.9f,1.f,0.f,0.25f);
   float limit;
   uint8_t _cond_242;
   _cond_242 = (comp > 0.f);
   if(_cond_242){ limit = (0.9f + (- comp)); }
   else
   { limit = 0.9f; }
   float cut;
   cut = float_clip(cut_in,0.f,limit);
   float noise;
   noise = (Util_simple_noise(_ctx._inst231) * 0.005f);
   return Tangents_process_heun(_ctx._inst232,(lp + noise),bp,hp,cut,res);
}

void Rescomb__ctx_type_0_init(Rescomb__ctx_type_0 &_output_){
   Rescomb__ctx_type_0 _ctx;
   _ctx.write_pos = 0;
   float_init_array(3000,0.f,_ctx.buffer);
   _output_ = _ctx;
   return ;
}

void Rescomb_delay_init(Rescomb__ctx_type_0 &_output_){
   Rescomb__ctx_type_0_init(_output_);
   return ;
}

float Rescomb_delay(Rescomb__ctx_type_0 &_ctx, float x, float cv){
   _ctx.write_pos = ((_ctx.write_pos + 1) % 3000);
   float_set(_ctx.buffer,_ctx.write_pos,x);
   float r_size;
   r_size = 3000.f;
   float r_index;
   r_index = fmodf((int_to_float(_ctx.write_pos) + (- (Util_cvToperiodUnit(cv) * getSampleRate()))),r_size);
   uint8_t _cond_250;
   _cond_250 = (r_index < 0.f);
   if(_cond_250){ r_index = (r_size + r_index); }
   int t1;
   t1 = (float_to_int(floorf(r_index)) % 3000);
   int t2;
   t2 = ((t1 + 1) % 3000);
   float decimal;
   decimal = (r_index + (- int_to_float(t1)));
   float x1;
   x1 = float_get(_ctx.buffer,t1);
   float x2;
   x2 = float_get(_ctx.buffer,t2);
   float ret;
   ret = (((x2 + (- x1)) * decimal) + x1);
   return ret;
}

float Rescomb_toneCurve(float tone){
   int index;
   index = int_clip(float_to_int((26.25f * (tone + 1.2f))),0,63);
   return (float_wrap_array(Rescomb_toneCurve_c0)[index] + (tone * (float_wrap_array(Rescomb_toneCurve_c1)[index] + (float_wrap_array(Rescomb_toneCurve_c2)[index] * tone))));
}

void Rescomb__ctx_type_2_init(Rescomb__ctx_type_2 &_output_){
   Rescomb__ctx_type_2 _ctx;
   _ctx.stone = 0.f;
   _ctx.output = 0.f;
   Rescomb__ctx_type_0_init(_ctx._inst249);
   Util__ctx_type_9_init(_ctx._inst248);
   Util__ctx_type_3_init(_ctx._inst246);
   _output_ = _ctx;
   return ;
}

void Rescomb_do_init(Rescomb__ctx_type_2 &_output_){
   Rescomb__ctx_type_2_init(_output_);
   return ;
}

float Rescomb_do(Rescomb__ctx_type_2 &_ctx, float in, float cv, float tone, float res){
   uint8_t _cond_252;
   _cond_252 = Util_change(_ctx._inst246,tone);
   if(_cond_252){
      _ctx.stone = Rescomb_toneCurve(tone);
   }
   float feedback;
   feedback = Util_dcblock(_ctx._inst248,(_ctx.output * res));
   float saturated_input;
   saturated_input = Util_stanh((in + feedback));
   _ctx.output = ((_ctx.stone * Rescomb_delay(_ctx._inst249,saturated_input,cv)) + in);
   return Util_stanh(_ctx.output);
}

float Lateralus_tune(float cut, float fs, float oversampling){
   float f;
   f = Util_cvTokHz(cut);
   float fh;
   fh = ((6.28318530718f * f) / (oversampling * fs));
   return fh;
}

float Lateralus_tune_44100(float cut){
   int index;
   index = int_clip(float_to_int((127.f * cut)),0,127);
   return (float_wrap_array(Lateralus_tune_44100_c0)[index] + (cut * (float_wrap_array(Lateralus_tune_44100_c1)[index] + (float_wrap_array(Lateralus_tune_44100_c2)[index] * cut))));
}

float Lateralus_tune_48000(float cut){
   int index;
   index = int_clip(float_to_int((127.f * cut)),0,127);
   return (float_wrap_array(Lateralus_tune_48000_c0)[index] + (cut * (float_wrap_array(Lateralus_tune_48000_c1)[index] + (float_wrap_array(Lateralus_tune_48000_c2)[index] * cut))));
}

float Lateralus_tune_88200(float cut){
   int index;
   index = int_clip(float_to_int((127.f * cut)),0,127);
   return (float_wrap_array(Lateralus_tune_88200_c0)[index] + (cut * (float_wrap_array(Lateralus_tune_88200_c1)[index] + (float_wrap_array(Lateralus_tune_88200_c2)[index] * cut))));
}

float Lateralus_tune_96000(float cut){
   int index;
   index = int_clip(float_to_int((127.f * cut)),0,127);
   return (float_wrap_array(Lateralus_tune_96000_c0)[index] + (cut * (float_wrap_array(Lateralus_tune_96000_c1)[index] + (float_wrap_array(Lateralus_tune_96000_c2)[index] * cut))));
}

float Lateralus_tune_176400(float cut){
   int index;
   index = int_clip(float_to_int((127.f * cut)),0,127);
   return (float_wrap_array(Lateralus_tune_176400_c0)[index] + (cut * (float_wrap_array(Lateralus_tune_176400_c1)[index] + (float_wrap_array(Lateralus_tune_176400_c2)[index] * cut))));
}

float Lateralus_tune_192000(float cut){
   int index;
   index = int_clip(float_to_int((127.f * cut)),0,127);
   return (float_wrap_array(Lateralus_tune_192000_c0)[index] + (cut * (float_wrap_array(Lateralus_tune_192000_c1)[index] + (float_wrap_array(Lateralus_tune_192000_c2)[index] * cut))));
}

float Lateralus_getTune(float cut, float fs){
   uint8_t _cond_290;
   _cond_290 = (fs == 44100.f);
   if(_cond_290){
      return Lateralus_tune_44100(cut);
   }
   else
   {
      uint8_t _cond_289;
      _cond_289 = (fs == 48000.f);
      if(_cond_289){
         return Lateralus_tune_48000(cut);
      }
      else
      {
         uint8_t _cond_288;
         _cond_288 = (fs == 88200.f);
         if(_cond_288){
            return Lateralus_tune_88200(cut);
         }
         else
         {
            uint8_t _cond_287;
            _cond_287 = (fs == 96000.f);
            if(_cond_287){
               return Lateralus_tune_96000(cut);
            }
            else
            {
               uint8_t _cond_286;
               _cond_286 = (fs == 176400.f);
               if(_cond_286){
                  return Lateralus_tune_176400(cut);
               }
               else
               {
                  uint8_t _cond_285;
                  _cond_285 = (fs == 192000.f);
                  if(_cond_285){
                     return Lateralus_tune_192000(cut);
                  }
                  else
                  {
                     return Lateralus_tune(cut,fs,4.f);
                  }
               }
            }
         }
      }
   }
}

void Lateralus__ctx_type_8_init(Lateralus__ctx_type_8 &_output_){
   Lateralus__ctx_type_8 _ctx;
   _ctx.p3 = 0.f;
   _ctx.p2 = 0.f;
   _ctx.p1 = 0.f;
   _ctx.p0 = 0.f;
   _output_ = _ctx;
   return ;
}

void Lateralus_heun_init(Lateralus__ctx_type_8 &_output_){
   Lateralus__ctx_type_8_init(_output_);
   return ;
}

void Lateralus_heun(Lateralus__ctx_type_8 &_ctx, float input, float fh, float res, _tuple___real_real__ &_output_){
   float wt0;
   wt0 = Util_cubic_clipper((input + (-4.f * res * _ctx.p3)));
   float wt1;
   wt1 = Util_cubic_clipper(_ctx.p0);
   float dpt0;
   dpt0 = ((wt0 + (- wt1)) * fh);
   float wt3;
   wt3 = Util_cubic_clipper(_ctx.p1);
   float dpt1;
   dpt1 = ((wt1 + (- wt3)) * fh);
   float wt5;
   wt5 = Util_cubic_clipper(_ctx.p2);
   float dpt2;
   dpt2 = ((wt3 + (- wt5)) * fh);
   float wt7;
   wt7 = Util_cubic_clipper(_ctx.p3);
   float dpt3;
   dpt3 = ((wt5 + (- wt7)) * fh);
   float pt0;
   pt0 = (_ctx.p0 + dpt0);
   float pt1;
   pt1 = (_ctx.p1 + dpt1);
   float pt2;
   pt2 = (_ctx.p2 + dpt2);
   float pt3;
   pt3 = (_ctx.p3 + dpt3);
   float w0;
   w0 = Util_cubic_clipper((input + (-4.f * res * pt3)));
   float w1;
   w1 = Util_cubic_clipper(pt0);
   float dp0;
   dp0 = ((w0 + (- w1)) * fh);
   float w3;
   w3 = Util_cubic_clipper(pt1);
   float dp1;
   dp1 = ((w1 + (- w3)) * fh);
   float w5;
   w5 = Util_cubic_clipper(pt2);
   float dp2;
   dp2 = ((w3 + (- w5)) * fh);
   float w7;
   w7 = Util_cubic_clipper(pt3);
   float dp3;
   dp3 = ((w5 + (- w7)) * fh);
   _ctx.p0 = (_ctx.p0 + ((dp0 + dpt0) * 0.5f));
   _ctx.p1 = (_ctx.p1 + ((dp1 + dpt1) * 0.5f));
   _ctx.p2 = (_ctx.p2 + ((dp2 + dpt2) * 0.5f));
   _ctx.p3 = (_ctx.p3 + ((dp3 + dpt3) * 0.5f));
   _tuple___real_real__ _tuple_291;
   {
      _tuple_291.field_0 = _ctx.p1;
      _tuple_291.field_1 = _ctx.p3;
   }
   _output_ = _tuple_291;
   return ;
}

void Lateralus__ctx_type_9_init(Lateralus__ctx_type_9 &_output_){
   Lateralus__ctx_type_9 _ctx;
   Lateralus__ctx_type_8_init(_ctx.h);
   _ctx.fh = 0.f;
   Util__ctx_type_3_init(_ctx._inst276);
   Util__ctx_type_3_init(_ctx._inst275);
   _output_ = _ctx;
   return ;
}

void Lateralus_process_heun_init(Lateralus__ctx_type_9 &_output_){
   Lateralus__ctx_type_9_init(_output_);
   return ;
}

void Lateralus_process_heun(Lateralus__ctx_type_9 &_ctx, float input, float cut, float res, _tuple___real_real__ &_output_){
   float fs;
   fs = getSampleRate();
   uint8_t _cond_293;
   _cond_293 = (Util_change(_ctx._inst275,cut) || Util_change(_ctx._inst276,fs));
   if(_cond_293){
      _ctx.fh = Lateralus_getTune(cut,fs);
   }
   float db12;
   float db24;
   db12 = 0.f;
   db24 = 0.f;
   uint8_t _cond_310;
   _cond_310 = ((fs == 176400.f) || (fs == 192000.f));
   if(_cond_310){
      _tuple___real_real__ _call_295;
      Lateralus_heun(_ctx.h,input,_ctx.fh,res,_call_295);
      db12 = _call_295.field_0;db24 = _call_295.field_1;
   }
   else
   {
      uint8_t _cond_309;
      _cond_309 = ((fs == 88200.f) || (fs == 96000.f));
      if(_cond_309){
         _tuple___real_real__ _call_297;
         Lateralus_heun(_ctx.h,input,_ctx.fh,res,_call_297);
         db12 = _call_297.field_0;db24 = _call_297.field_1;
         _tuple___real_real__ _call_298;
         Lateralus_heun(_ctx.h,input,_ctx.fh,res,_call_298);
         db12 = _call_298.field_0;db24 = _call_298.field_1;
      }
      else
      {
         _tuple___real_real__ _call_301;
         Lateralus_heun(_ctx.h,input,_ctx.fh,res,_call_301);
         db12 = _call_301.field_0;db24 = _call_301.field_1;
         _tuple___real_real__ _call_302;
         Lateralus_heun(_ctx.h,input,_ctx.fh,res,_call_302);
         db12 = _call_302.field_0;db24 = _call_302.field_1;
         _tuple___real_real__ _call_303;
         Lateralus_heun(_ctx.h,input,_ctx.fh,res,_call_303);
         db12 = _call_303.field_0;db24 = _call_303.field_1;
         _tuple___real_real__ _call_304;
         Lateralus_heun(_ctx.h,input,_ctx.fh,res,_call_304);
         db12 = _call_304.field_0;db24 = _call_304.field_1;
      }
   }
   _tuple___real_real__ _tuple_311;
   {
      _tuple_311.field_0 = (db12 * (1.f + (res * 0.5f)));
      _tuple_311.field_1 = (db24 * (1.f + res));
   }
   _output_ = _tuple_311;
   return ;
}

void Lateralus__ctx_type_10_init(Lateralus__ctx_type_10 &_output_){
   Lateralus__ctx_type_10 _ctx;
   Lateralus__ctx_type_9_init(_ctx._inst284);
   Util__ctx_type_18_init(_ctx._inst283);
   _output_ = _ctx;
   return ;
}

void Lateralus_process_init(Lateralus__ctx_type_10 &_output_){
   Lateralus__ctx_type_10_init(_output_);
   return ;
}

void Lateralus_process(Lateralus__ctx_type_10 &_ctx, float input, float cut_in, float res_in, _tuple___real_real__ &_output_){
   float res;
   res = Util_polylog(res_in);
   float comp;
   comp = Util_map(res,0.9f,1.f,0.f,0.25f);
   float limit;
   uint8_t _cond_314;
   _cond_314 = (comp > 0.f);
   if(_cond_314){ limit = (0.9f + (- comp)); }
   else
   { limit = 0.9f; }
   float cut;
   cut = float_clip(cut_in,0.f,limit);
   float noise;
   noise = (Util_simple_noise(_ctx._inst283) * 0.005f);
   _tuple___real_real__ _call_313;
   Lateralus_process_heun(_ctx._inst284,(input + noise),cut,(res * 1.1f),_call_313);
   _output_ = _call_313;
   return ;
}

float Debriatus_saturate(float x){
   int index;
   index = int_clip(float_to_int((5.f * (x + 24.f))),0,240);
   return (float_wrap_array(Debriatus_saturate_c0)[index] + (x * (float_wrap_array(Debriatus_saturate_c1)[index] + (float_wrap_array(Debriatus_saturate_c2)[index] * x))));
}

float Debriatus_factor(float cv){
   int index;
   index = int_clip(float_to_int((127.f * cv)),0,127);
   return (float_wrap_array(Debriatus_factor_c0)[index] + (cv * (float_wrap_array(Debriatus_factor_c1)[index] + (float_wrap_array(Debriatus_factor_c2)[index] * cv))));
}

float Debriatus_crush(float i, float cv){
   float out;
   out = i;
   uint8_t _cond_383;
   _cond_383 = (cv == 0.f);
   if(_cond_383){
      out = i;
   }
   else
   {
      float b;
      b = Debriatus_factor(cv);
      int x;
      x = float_to_int((i * b));
      out = (int_to_float(x) / b);
   }
   return out;
}

float Debriatus_fold(float signal, float level){
   float sign;
   uint8_t _cond_384;
   _cond_384 = (signal > 0.f);
   if(_cond_384){ sign = 1.f; }
   else
   { sign = -1.f; }
   float amp;
   amp = (fabsf(signal) * ((8.f * level) + 1.f));
   float base;
   base = floorf(amp);
   float delta;
   delta = (amp + (- base));
   float out;
   uint8_t _cond_385;
   _cond_385 = ((float_to_int(base) % 2) != 0);
   if(_cond_385){ out = (1.f + (- delta)); }
   else
   { out = delta; }
   return (sign * out);
}

float Debriatus_process(float input, float fold, float crush, float distort, float saturate){
   float x;
   x = Debriatus_fold(input,fold);
   float y;
   y = Debriatus_crush(x,crush);
   float z;
   z = ((y * (1.f + (-2.f * distort))) + (y * y * y * distort * 8.f) + (- distort));
   float out;
   out = Debriatus_saturate((z * (1.f + (saturate * 8.f))));
   return out;
}

void VultEngine__ctx_type_0_init(VultEngine__ctx_type_0 &_output_){
   VultEngine__ctx_type_0 _ctx;
   Rescomb__ctx_type_2_init(_ctx.inst);
   _output_ = _ctx;
   return ;
}

void VultEngine_rescomb_init(VultEngine__ctx_type_0 &_output_){
   VultEngine__ctx_type_0_init(_output_);
   return ;
}

float VultEngine_rescomb(VultEngine__ctx_type_0 &_ctx, float in, float cv_in, float tone_in, float res_in){
   float i;
   i = float_clip(in,-10.f,10.f);
   float cv;
   cv = float_clip(cv_in,0.f,1.f);
   float tone;
   tone = float_clip(tone_in,-1.05f,1.05f);
   float res;
   res = float_clip(res_in,-1.1f,1.1f);
   return Rescomb_do(_ctx.inst,i,cv,tone,res);
}

void VultEngine__ctx_type_1_init(VultEngine__ctx_type_1 &_output_){
   VultEngine__ctx_type_1 _ctx;
   Stabile__ctx_type_8_init(_ctx._inst388);
   _output_ = _ctx;
   return ;
}

void VultEngine_stabile_init(VultEngine__ctx_type_1 &_output_){
   VultEngine__ctx_type_1_init(_output_);
   return ;
}

void VultEngine_stabile(VultEngine__ctx_type_1 &_ctx, float in, float cut_in, float res_in, float semblance_in, _tuple___real_real_real_real__ &_output_){
   float cut;
   cut = float_clip(cut_in,0.f,0.92f);
   float res;
   res = float_clip(res_in,0.f,4.f);
   float semblance;
   semblance = float_clip(semblance_in,0.f,1.f);
   _tuple___real_real_real_real__ _call_397;
   Stabile_process(_ctx._inst388,in,cut,res,semblance,_call_397);
   _output_ = _call_397;
   return ;
}

void VultEngine__ctx_type_2_init(VultEngine__ctx_type_2 &_output_){
   VultEngine__ctx_type_2 _ctx;
   Lateralus__ctx_type_10_init(_ctx._inst390);
   _output_ = _ctx;
   return ;
}

void VultEngine_lateralus_init(VultEngine__ctx_type_2 &_output_){
   VultEngine__ctx_type_2_init(_output_);
   return ;
}

void VultEngine_lateralus(VultEngine__ctx_type_2 &_ctx, float in, float cut, float res, _tuple___real_real__ &_output_){
   _tuple___real_real__ _call_399;
   Lateralus_process(_ctx._inst390,in,cut,res,_call_399);
   _output_ = _call_399;
   return ;
}

void VultEngine__ctx_type_3_init(VultEngine__ctx_type_3 &_output_){
   VultEngine__ctx_type_3 _ctx;
   Tangents__ctx_type_11_init(_ctx._inst392);
   _output_ = _ctx;
   return ;
}

void VultEngine_tangents_init(VultEngine__ctx_type_3 &_output_){
   VultEngine__ctx_type_3_init(_output_);
   return ;
}

float VultEngine_tangents(VultEngine__ctx_type_3 &_ctx, float lp, float bp, float hp, float cut, float res){
   return Tangents_process(_ctx._inst392,lp,bp,hp,cut,res);
}

float VultEngine_debriatus(float in, float fold_in, float crush_in, float distort_in, float saturate_in){
   float fold;
   fold = float_clip(fold_in,0.f,1.f);
   float crush;
   crush = float_clip(crush_in,0.f,1.f);
   float distort;
   distort = float_clip(distort_in,0.f,1.f);
   float saturate;
   saturate = float_clip(saturate_in,0.f,1.f);
   return Debriatus_process(in,fold,crush,distort,saturate);
}

void VultEngine__ctx_type_5_init(VultEngine__ctx_type_5 &_output_){
   VultEngine__ctx_type_5 _ctx;
   Trummor__ctx_type_0_init(_ctx.processor);
   _output_ = _ctx;
   return ;
}

void VultEngine_trummor_init(VultEngine__ctx_type_5 &_output_){
   VultEngine__ctx_type_5_init(_output_);
   return ;
}

void VultEngine_trummor(VultEngine__ctx_type_5 &_ctx, float gate, float osc_in, float noise_in, _tuple___real_real_real_real__ &_output_){
   _tuple___real_real_real_real__ _call_401;
   Trummor_do(_ctx.processor,gate,osc_in,noise_in,_call_401);
   _output_ = _call_401;
   return ;
}

void VultEngine__ctx_type_6_init(VultEngine__ctx_type_6 &_output_){
   VultEngine__ctx_type_6 _ctx;
   Tohe__ctx_type_2_init(_ctx._inst396);
   _output_ = _ctx;
   return ;
}

void VultEngine_tohe_init(VultEngine__ctx_type_6 &_output_){
   VultEngine__ctx_type_6_init(_output_);
   return ;
}

float VultEngine_tohe(VultEngine__ctx_type_6 &_ctx, float x, float tone_in){
   float tone;
   tone = float_clip(tone_in,-1.f,1.f);
   return Tohe_do(_ctx._inst396,x,tone);
}


